(function() {var implementors = {};
implementors["palette"] = [{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.63.0/std/error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> for <a class=\"struct\" href=\"palette/cast/struct.SliceCastError.html\" title=\"struct palette::cast::SliceCastError\">SliceCastError</a>","synthetic":false,"types":["palette::cast::array::SliceCastError"]},{"text":"impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.63.0/std/error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> for <a class=\"struct\" href=\"palette/cast/struct.BoxedSliceCastError.html\" title=\"struct palette::cast::BoxedSliceCastError\">BoxedSliceCastError</a>&lt;T&gt;","synthetic":false,"types":["palette::cast::array::BoxedSliceCastError"]},{"text":"impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.63.0/std/error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> for <a class=\"struct\" href=\"palette/cast/struct.VecCastError.html\" title=\"struct palette::cast::VecCastError\">VecCastError</a>&lt;T&gt;","synthetic":false,"types":["palette::cast::array::VecCastError"]},{"text":"impl&lt;T:&nbsp;<a class=\"trait\" href=\"https://doc.rust-lang.org/1.63.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.63.0/std/error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> for <a class=\"struct\" href=\"palette/convert/struct.OutOfBounds.html\" title=\"struct palette::convert::OutOfBounds\">OutOfBounds</a>&lt;T&gt;","synthetic":false,"types":["palette::convert::try_from_into_color::OutOfBounds"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.63.0/std/error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> for <a class=\"enum\" href=\"palette/rgb/enum.FromHexError.html\" title=\"enum palette::rgb::FromHexError\">FromHexError</a>","synthetic":false,"types":["palette::rgb::rgb::FromHexError"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()